const { Events, EmbedBuilder, ButtonBuilder, ActionRowBuilder, ButtonStyle, Collection, PermissionsBitField } = require('discord.js');
const fetch = require('node-fetch');
const prefixModel = require('../../Database/Models/prefix');
const blacklist = require('../../Database/Models/Blacklist');
const chatter = require('../../Database/Models/chatter');

module.exports = {
  name: Events.MessageCreate,
  execute: async (client, message) => {
    if (!message.guild) {
      try {
        const embed = new EmbedBuilder()
          .setAuthor(
            { name: 'Xara Defender', iconURL: client.user.displayAvatarURL({ dynamic: true }) }
          )
          .setThumbnail(client.user.displayAvatarURL({ dynamic: true }))
          .setDescription(`Why are you DM me? I can only respond to commands on servers.\n[Maybe you want to Invite Me?](https://discord.com/api/oauth2/authorize?client_id=962092097933021184&permissions=4398046511095&scope=bot%20applications.commands)`)
          .setFooter(
            { text: 'Xara Developers', iconURL: client.user.displayAvatarURL({ dynamic: true }) }
          )
          .setColor('0x2f3136')
          .setTimestamp();
        return message.author.reply({ embeds: [embed] });
      } catch (err) {
        return;
      }
    }

    const blockdata = await blacklist.findOne({
      User: message.author.id
    }).catch((err) => console.error(err));

    const blockedEmbed = new EmbedBuilder()
      .setAuthor(
        { name: 'Xara Defender', iconURL: client.user.displayAvatarURL({ dynamic: true }) }
      )
      .setDescription('You have been restricted from the Xara Developers')
      .setFooter(
        { text: 'Xara developers', iconURL: client.user.displayAvatarURL({ dynamic: true }) }
      )
      .setColor('0x2f3136')
      .setTimestamp();
    if (blockdata) return await message.reply({ embeds: [blockedEmbed] });

    if (message.author.bot || message.webhookId) return;

    const prefixData = await prefixModel.findOne({
      Guild: message.guildId
    }).catch((err) => console.error(err));

    if (prefixData && prefixData.Prefix) {
      var prefix = prefixData.Prefix;
    } else if (!prefixData) {
      prefix = client.prefix;
    }

    /*await chatter.findOne({
      Guild: message.guildId
    }, async (err, data) => {
      if (err) throw err;
      if (!data) return;
      if (data.Channel.includes(message.channel.id)) {
        await fetch(`https://api.affiliateplus.xyz/api/chatbot?message=${encodeURIComponent(message.content)}&name=Xara&master=Aikyo&birthday=April 1&birthdate=April&birthyear=2004&birthplace=Bangladesh&age=18&country=Bangladesh&location=Bangladesh&state=Barisal&city=Barisal&nationality=Bangladeshi`)
          .then((res) => res.json())
          .then((data) => {
            message.channel.sendTyping();
            message.reply({ content: `${data.message}` });
          });
      }
    });*/

    

    const escapeRegex = (str) => str.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
 
    const prefixRegex = new RegExp(`^(<@!?${client.user.id}>|${escapeRegex(prefix)})\\s*`);
    if (!prefixRegex.test(message.content)) return;

    const [matchedPrefix] = message.content.match(prefixRegex);
  
    if (!message.member) message.member = await message.guild.members.fetch(message);
 
    const args = message.content.slice(matchedPrefix.length).trim().split(/ +/g);
  
    const cmd = args.shift().toLowerCase().normalize();
    if (cmd.length === 0) return;

    const command = client.commands.get(cmd) || client.commands.get(client.aliases.get(cmd));

    if (!command) return;
    let player = client.manager.get(message.guildId);

    if (!message.channel.permissionsFor(message.guild.members.me).has([PermissionsBitField.Flags.ViewChannel && PermissionsBitField.Flags.SendMessages])) return;

    if (!message.channel.permissionsFor(message.guild.members.me).has([PermissionsBitField.Flags.EmbedLinks])) return await message.reply({ content: `I don't have \`EmbedLinks\` permission to execute this command.` });

    if (command.clientPerms && !message.channel.permissionsFor(message.guild.members.me).has(PermissionsBitField.resolve(command.clientPerms))) {
      const embeds = new EmbedBuilder()
        .setAuthor(
          { name: 'Xara Defender', iconURL: client.user.displayAvatarURL({ dynamic: true }) }
        )
        .setDescription(`I need to this \`${command.clientPerms.join(', ')}\` permission(s) to execute this command.`)
        .setFooter(
          { text: 'Xara Developers', iconURL: client.user.displayAvatarURL({ dynamic: true }) }
        )
        .setColor('0x2f3136')
        .setTimestamp();
      return await message.reply({ embeds: [embeds] });
    }

    if (command.userPerms && !message.channel.permissionsFor(message.member).has(PermissionsBitField.resolve(command.userPerms))) {
      const embeds = new EmbedBuilder()
        .setAuthor(
          { name: 'Xara Defender', iconURL: client.user.displayAvatarURL({ dynamic: true }) }
        )
        .setDescription(`You need to this \`${command.userPerms.join(', ')}\` permission(s) to execute this command.`)
        .setFooter(
          { text: 'Xara Developers', iconURL: client.user.displayAvatarURL({ dynamic: true }) }
        )
        .setColor('0x2f3136')
        .setTimestamp();
      return await message.reply({ embeds: [embeds] });
    }

    /*if (!cooldowns.has(command.name)) {
      cooldowns.set(command.name, new Collection());
    }
    
    const now = Date.now();
    const timestamps = cooldowns.get(command.name);
    const cooldownAmount = (command.cooldown || 1) * 1000;
    
    if (timestamps.has(message.author.id)) {
      const expirationTime = timestamps.get(message.author.id) + cooldownAmount;
    
      if (now < expirationTime) {
        const timeLeft = (expirationTime - now) / 1000;
        return message.reply(`Please wait ${ timeLeft.toFixed(1) } more second(s) before reusing the \`${command.name}\` command.`);
      }
    }
    
    timestamps.set(message.author.id, now);
    setTimeout(() => timestamps.delete(message.author.id), cooldownAmount);*/

    if (command.owner) {
      if (!client.owner.includes(message.author.id)) {
        const embeds = new EmbedBuilder()
          .setAuthor(
            { name: 'Xara Defender', iconURL: client.user.displayAvatarURL({ dynamic: true }) }
          )
          .setDescription('This command can only be executed by the owner.')
          .setFooter(
            { text: 'Xara Developers', iconURL: client.user.displayAvatarURL({ dynamic: true }) }
          )
          .setColor('0x2f3136')
          .setTimestamp();
        return await message.reply({ embeds: [embeds] });
      }
    }

    try {
      command.execute(client, message, args, prefix);
    } catch (error) {
      console.error(error);
      const embeds = new EmbedBuilder()
        .setAuthor(
          { name: 'Xara Defender', iconURL: client.user.displayAvatarURL({ dynamic: true }) }
        )
        .setDescription('There was an error executing that command.')
        .setFooter(
          { text: 'Xara Developers', iconURL: client.user.displayAvatarURL({ dynamic: true }) }
        )
        .setColor('0x2f3136')
        .setTimestamp();
      return await message.reply({ embeds: [embeds] });
    }
  }
};