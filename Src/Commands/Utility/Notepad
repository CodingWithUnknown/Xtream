const { ApplicationCommandType, ApplicationCommandOptionType, EmbedBuilder, ChannelType } = require('discord.js');
const { Types } = require('mongoose');
const Data = require('../../Models/Schema/Notepad');

module.exports = {
  name: 'notepad',
  description: 'A brief record of something written down to assist the memory or for future reference',
  type: ApplicationCommandType.ChatInput,
  options: [{
    name: 'add',
    description: 'A brief record of something written down to assist the memory or for future reference',
    type: ApplicationCommandOptionType.Subcommand,
    options: [{
      name: 'name',
      description: 'Add a title for notes',
      type: ApplicationCommandOptionType.String,
      required: true
    }, {
      name: 'text',
      description: 'Add a title for notes',
      type: ApplicationCommandOptionType.String,
      required: true
    }]
  }],
  execute: async (client, interaction) => {
    if ('add'.includes(interaction.options.getSubcommand())) {
      let name = interaction.options.getString('name'),
        text = interaction.options.getString('text');

      

       /*await Data.findOne({
        //_id: Types.ObjectId(),
        Guild: interaction.guildId,
        Username: interaction.user.tag,
        Id: interaction.user.id
      }, async (err, data) => {
        if (err) throw err;
        if (data) {
          data.Information.push({
            Type: 'Notepad',
            Name: name,
            Text: text,
            Date: new Date().toLocaleString()
          })
          data.save().then(async () => {
            interaction.reply({ content: 'okay' });
          });
        } else {
          data = new Data({
            //_id: Types.ObjectId(),
            Guild: interaction.guildId,
            Username: interaction.user.tag,
            Id: interaction.user.id,
            Information: [{
              Type: 'Notepad',
              Name: name,
              Text: text,
              Date: new Date().toLocaleDateString()
            }]
          });
          await data.save().then(async () => {
            const embeds = new EmbedBuilder()
              .setAvatar(
                { name: 'Xara Defender', iconURL: client.user.displayAvatarURL({ dynamic: true }) }
              )
              .setDescription(`Added a new note.\nName: ${name}`)
              .setFooter(
                { text: 'Xara Developers', iconURL: client.user.displayAvatarURL({ dynamic: true }) }
              )
              .setColor('0x2c2d31')
              .setTimestamp();
            await interaction.reply({ embeds: [embeds] });
          });
        }
      });*/
    }
  }
};