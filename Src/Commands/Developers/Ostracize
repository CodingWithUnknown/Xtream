const { ApplicationCommandType, ApplicationCommandOptionType, EmbedBuilder } = require('discord.js');
const Data = require('../../Models/Schema/Ostracize');

module.exports = {
  name: 'ostracize',
  description: 'Ostracize a user from the Xara developers',
  type: ApplicationCommandType.ChatInput,
  developer: true,
  options: [{
    name: 'add',
    description: 'Ostracize to a user from the Xara developers',
    type: ApplicationCommandOptionType.Subcommand,
    options: [{
      name: 'user',
      description: 'Mention a user to ostracize for',
      type: ApplicationCommandOptionType.User,
      required: false
    }, {
      name: 'id',
      description: 'Provide a user id to ostracize for',
      type: ApplicationCommandOptionType.String,
      required: false
    }]
  }, {
    name: 'remove',
    description: 'Include a user from the Xara developers',
    type: ApplicationCommandOptionType.Subcommand,
    options: [{
      name: 'user',
      description: 'Mention a user to include for',
      type: ApplicationCommandOptionType.User,
      required: false
    }, {
      name: 'id',
      description: 'Provide a user id to include for',
      type: ApplicationCommandOptionType.String,
      required: false
    }]
  }],
  execute: async (client, interaction) => {
    if ('add'.includes(interaction.options.getSubcommand())) {
      let mention = interaction.guild.members.cache.get(interaction.options.getUser('user').id) ?? interaction.guild.members.cache.get(interaction.options.getString('id'));

      if (!mention) {
        const embeds = new EmbedBuilder()
          .setAuthor(
            { name: 'Xara Defender', iconURL: client.user.displayAvatarURL({ dynamic: true }) }
          )
          .setDescription('This user does not exist in the server')
          .setFooter(
            { text: 'Xara Developers', iconURL: client.user.displayAvatarURL({ dynamic: true }), }
          )
          .setColor(0x2f3136)
          .setTimestamp();
        return await interaction.reply({ embeds: [embeds], ephemeral: true });
      }

      await Data.findOne({
        User: mention.user.id
      }, async (err, data) => {
        if (err) throw err;
        if (data) {
          const embeds = new EmbedBuilder()
            .setAuthor(
              { name: 'Xara Defender', iconURL: client.user.displayAvatarURL({ dynamic: true }) }
            )
            .setDescription(`${mention.user.tag} was been already ostracized!`)
            .setFooter(
              { text: 'Xara Developers', iconURL: client.user.displayAvatarURL({ dynamic: true }) }
            )
            .setColor(0x2f3136)
            .setTimestamp();
          return await interaction.reply({ embeds: [embeds] });
        } else {
          data = new Data({
            User: mention.user.id
          });
          await data.save().then(async () => {
            const embeds = new EmbedBuilder()
              .setAuthor(
                { name: 'Xara Defender', iconURL: client.user.displayAvatarURL({ dynamic: true }) }
              )
              .setThumbnail(mention.user.displayAvatarURL({ dynamic: true }))
              .setDescription(`**${mention.user.tag}** user has been ostracized.\n\n*(Now this user has no longer to execute all ( / ) commands.)*`)
              .setFooter(
                { text: 'Xara Developers', iconURL: client.user.displayAvatarURL({ dynamic: true }) }
              )
              .setColor(0x2f3136)
              .setTimestamp();
            return await interaction.reply({ embeds: [embeds] });
          });
        }
      });
    }

    if ('remove'.includes(interaction.options.getSubcommand())) {
      let mention = interaction.guild.members.cache.get(interaction.options.getUser('user').id) ?? interaction.guild.members.cache.get(interaction.options.getString('id'));

      if (!mention) {
        const embeds = new EmbedBuilder()
          .setAuthor(
            { name: 'Xara Defender', iconURL: client.user.displayAvatarURL({ dynamic: true }) }
          )
          .setDescription('This user does not exist in the server')
          .setFooter(
            { text: 'Xara Developers', iconURL: client.user.displayAvatarURL({ dynamic: true }), }
          )
          .setColor(0x2f3136)
          .setTimestamp();
        return await interaction.reply({ embeds: [embeds], ephemeral: true });
      }

      await Data.findOne({
        User: mention.user.id
      }, async (err, data) => {
        if (err) throw err;
        if (data) {
          await Data.findOneAndDelete({
            User: mention.user.id
          }).then(async () => {
            const embeds = new EmbedBuilder()
              .setAuthor(
                { name: 'Xara Defender', iconURL: client.user.displayAvatarURL({ dynamic: true }) }
              )
              .setThumbnail(mention.user.displayAvatarURL({ dynamic: true }))
              .setDescription(`**${mention.user.tag}** user has been included.\n\n(Now this user can execute to all ( / ) commands.)`)
              .setFooter(
                { text: 'Xara Developers', iconURL: client.user.displayAvatarURL({ dynamic: true }) })
              .setColor(0x2f3136)
              .setTimestamp();
            return await interaction.reply({ embeds: [embeds] });
          }).then((err) => console.error(err));
        } else {
          const embeds = new EmbedBuilder()
            .setAuthor(
              { name: 'Xara Defender', iconURL: client.user.displayAvatarURL({ dynamic: true }) }
            )
            .setDescription(`${mention.user.tag} was not ostracized!`)
            .setFooter(
              { text: 'Xara Developers', iconURL: client.user.displayAvatarURL({ dynamic: true }) }
            )
            .setColor(0x2f3136)
            .setTimestamp();
          return await interaction.reply({ embeds: [embeds] });
        }
      });
    }
  }
};